#!/bin/bash
# Time-stamp: "2024-12-16 07:31:12 (ywatanabe)"
# File: ./Ninja/src/apptainer_builders/start_emacs.sh

# Check if running as root
if [ "$(id -u)" != "0" ]; then
    echo "This script ($0) must be run as root" >&2
    exit 1
fi

source "$(dirname $0)"/ENVS.sh.src

rm_socket() {
    if [ -d "$NINJA_EMACSD_SERVER_DIR" ]; then
        rm -rf "$NINJA_EMACSD_SERVER_DIR"
    fi
}

correct_socket_dir_permissions() {

    mkdir -p "$NINJA_EMACSD_SERVER_DIR"
    chown root:"$NINJAS_GROUP" "$NINJA_EMACSD_SERVER_DIR"
    chmod 770 "$NINJA_EMACSD_SERVER_DIR"
    if [ $? -ne 0 ]; then
        echo "Error setting permissions for $NINJA_EMACSD_SERVER_DIR" >&2
        exit 1
    fi

    echo ""
    echo "----------------------------------------"
    echo "Socket directory permissions were corrected."
    echo "$NINJA_EMACSD_SERVER_DIR"
    ls "$NINJA_EMACSD_SERVER_DIR" -al
    echo "----------------------------------------"
    echo ""
}


correct_socket_permissions() {
    local socket_dir
    socket_dir=$(dirname "$NINJA_EMACSD_SERVER_FILE")
    if [ -d "$socket_dir" ]; then
        chown -R root:"$NINJAS_GROUP" "$socket_dir"
        chmod -R 770 "$socket_dir"
        if [ $? -ne 0 ]; then
            echo "Error setting permissions for $socket_dir" >&2
            exit 1
        fi
    fi
    echo ""
    echo "----------------------------------------"
    echo "Socket permissions were corrected."
    echo "$NINJA_EMACSD_SERVER_FILE"
    ls "$NINJA_EMACSD_SERVER_FILE" -al
    echo "----------------------------------------"
    echo ""
}

debugging_echo() {
    # User
    echo "User: $NINJA_USER"

    # Socket directory
    echo "Socket Directory: $NINJA_EMACSD_SERVER_DIR"
    ls "$NINJA_EMACSD_SERVER_DIR" -al

    # Socket
    echo "Socket: $NINJA_EMACSD_SERVER_FILE"
    if [ -S "$NINJA_EMACSD_SERVER_FILE" ]; then
        ls "$NINJA_EMACSD_SERVER_FILE" -al
    fi
}

display_check() {
    # Display
    echo "Display: $DISPLAY"
    if [ -z "$DISPLAY" ]; then
        echo "DISPLAY variable is not set. Cannot start GUI emacs."
        return 1
    fi
}

get_connected_clients() {
    local count
    count=$("$NINJA_EMACS_CLIENT" -s "$NINJA_EMACSD_SERVER_FILE" --eval '(message (length server-clients))')

    echo ""
    echo "========================================"
    echo "Number of connected clients: $count"
    echo "========================================"
    echo ""
}


create_init_file() {
    local init_file="/tmp/ninja-emacs-init.el"
    cat > "$init_file" <<EOF
(require 'server)
(setq server-name "$NINJA_EMACSD_SERVER_FILE")
(server-start)
EOF
    echo "$init_file"
}


connect_user() {
    local current_user="$1"
    local current_display="$2"
    # working; -nw
    # su - $current_user -c "DISPLAY=$current_display; $NINJA_EMACS_CLIENT -c -s $NINJA_EMACSD_SERVER_FILE &"
    su - $current_user -c "DISPLAY=$current_display $NINJA_EMACS_CLIENT -c -s $NINJA_EMACSD_SERVER_FILE &"
    get_connected_clients
}

kill_emacs() {
    local pid
    pid=$(pgrep -f "$NINJA_EMACS_BIN --daemon=$NINJA_EMACSD_SERVER_FILE")
    if [ -n "$pid" ]; then
        kill "$pid"
        echo "Emacs daemon (pid $pid) killed."
    else
        echo "No Emacs daemon found."
    fi
}

start_emacs() {
    export NINJA_EMACSD_SERVER_FILE=/tmp/ninja-shared/server

    rm_socket
    correct_socket_dir_permissions
    display_check

    # Start the emacs server before the loop
    rm -f "$NINJA_EMACSD_SERVER_FILE"
    kill_emacs
    $NINJA_EMACS_BIN --daemon=$NINJA_EMACSD_SERVER_FILE --init-directory /home/ywatanabe/.dotfiles/.emacs.d
    correct_socket_dir_permissions
    correct_socket_permissions
    HOME=/home/ywatanabe DISPLAY=$DISPLAY $NINJA_EMACS_CLIENT -s $NINJA_EMACSD_SERVER_FILE -c &

    connect_user ninja-001 :1
    connect_user ninja-002 :1
    connect_user ninja-003 :1
    connect_user ninja-004 :1

    $NINJA_EMACS_CLIENT -s $NINJA_EMACSD_SERVER_FILE --eval '(length server-clients)'

    sleep 100
}

start_emacs

echo "
apptainer run \
          --fakeroot \
          --writable \
          ./.apptainer/ninja/ninja.sandbox
"

# EOF
