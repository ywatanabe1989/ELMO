;;; -*- lexical-binding: t -*-
;;; Author: 2024-12-07 09:52:33
;;; Time-stamp: <2024-12-07 09:52:33 (ywatanabe)>
;;; File: ./self-evolving-agent/src/llemacs-config.el


;;; Code:

(require 'json)
(require 'request)
(require 'w3m nil t)

(defgroup llemacs nil
  "Self-evolving agent configuration."
  :group 'applications)

(defvar llemacs--sudo-password nil
  "Temporary storage for sudo password.")

(defvar llemacs-max-retries 5
  "Maximum number of retries for failed execution.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Base directories for the user; defined in llemacs-config.el and thus commented-out here
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ;; User installation paths
;; (defvar llemacs-user-root-dir (file-name-directory (directory-file-name
;;                                               (file-name-directory
;;                                                (or load-file-name buffer-file-name))))
;;   "User's ELMO installation root directory.")

;; (defvar llemacs-user-source-dir (expand-file-name "src" llemacs-user-root-dir)
;;   "User's ELMO source directory.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Base directories for the ELMO user
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcustom llemacs-user "llemacs"
  "ELMO system user name."
  :type 'string
  :group 'llemacs)

(defvar llemacs-uid
  (string-to-number (shell-command-to-string (format "id -u %s" llemacs-user)))
  "User ID of ELMO system user.")

(defcustom llemacs-work-dir (format "~/.%s" llemacs-user)
  "ELMO working directory."
  :type 'directory
  :group 'llemacs)

(defcustom llemacs-home (format "/home/%s" llemacs-user)
  "ELMO user home directory."
  :type 'directory
  :group 'llemacs)

(defvar llemacs-workspace-dir (expand-file-name "workspace" llemacs-work-dir))
(defvar llemacs-source-dir (expand-file-name "self-evolving-agent/src" llemacs-workspace-dir))
(defvar llemacs-backups-dir (expand-file-name "backups" llemacs-work-dir))
(defvar llemacs-logs-dir (expand-file-name "logs" llemacs-work-dir))
(defvar llemacs-log-file (expand-file-name "history.log" llemacs-logs-dir))
(defvar llemacs-command-logs-dir (expand-file-name "command-logs" llemacs-work-dir))
(defvar llemacs-log-command-file
  (expand-file-name
   (format "%s.log"
           (format-time-string "%Y%m%d-%H%M%S"))
   llemacs-command-logs-dir))
(defvar llemacs-requests-dir (expand-file-name "requests" llemacs-work-dir))
(defvar llemacs-config-dir (expand-file-name "config" llemacs-work-dir))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Server
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcustom llemacs-emacs-bin "/usr/bin/emacs"
  "Path to Emacs binary."
  :type 'file
  :group 'llemacs)

(defcustom llemacs-emacs-cli "/usr/bin/emacsclient"
  "Path to emacsclient binary."
  :type 'file
  :group 'llemacs)

(defcustom llemacs-server-script-path
  (expand-file-name "llemacs_server.sh" llemacs-user-source-dir)
  "Path to ELMO server control script."
  :type 'string
  :group 'llemacs)
;; Its value is
;; "/home/ywatanabe/.emacs.d/lisp/self-evolving-agent/src/llemacs_server.sh"

(defvar llemacs-server-script-output nil
  "Store output from server script calls.")
;; llemacs-server-script-outputâ€™s value is

(defvar llemacs-log-file (expand-file-name "llemacs.log" llemacs-logs-dir)
  "Store output from server script calls.")
;; "/home/ywatanabe/.llemacs/logs/llemacs.log"

(defcustom llemacs-server-socket-dir (format "/tmp/emacs%d" llemacs-uid)
  "Directory for ELMO Emacs server socket.")
;; Its value is "/tmp/emacs999"

(defcustom llemacs-server-socket-file (format "/tmp/emacs%d/server" llemacs-uid)
  "File path for ELMO Emacs server socket.")
;; Its value is "/tmp/emacs999/server"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GitHub
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcustom llemacs-github-token-file (expand-file-name "github-token" llemacs-config-dir)
  "Path to GitHub token file. Requires 600 permissions."
  :type 'file
  :group 'llemacs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; User Interaction
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcustom llemacs-prompts-dir (expand-file-name "prompts" llemacs-user-source-dir)
  "File for user's improvement requests."
  :type 'file
  :group 'llemacs)

(defcustom llemacs-user-request-file (expand-file-name "user-request.md" llemacs-requests-dir)
  "File for user's improvement requests."
  :type 'file
  :group 'llemacs)

(defcustom llemacs-request-file (expand-file-name "llemacs-request.md" llemacs-requests-dir)
  "File for ELMO's improvement suggestions."
  :type 'file
  :group 'llemacs)

(defcustom llemacs-history-file (expand-file-name "history.log" llemacs-logs-dir)
  "File to store agent history."
  :type 'file
  :group 'llemacs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Operation modes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defcustom llemacs-readonly-mode t
  "When non-nil, prevent modifications to core agent files."
  :type 'boolean
  :group 'llemacs)

(defcustom llemacs-require-approval t
  "When non-nil, require user approval for critical operations."
  :type 'boolean
  :group 'llemacs)

(defcustom llemacs-api-timeout 30
  "Timeout in seconds for API calls."
  :type 'integer
  :group 'llemacs)

(defvar llemacs-debug nil
  "Enable debug logging when non-nil.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LLM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar llemacs-anthropic-key (getenv "LLM_API_KEY")
  "API key for Anthropic Claude.")

(defvar llemacs-anthropic-engine (getenv "LLM_ENGINE")
  "Model for Anthropic Claude.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Logging
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar llemacs-backup-limit 10
  "Maximum number of backups to keep.")

(defvar llemacs--installation-log-file (expand-file-name "installation.log" llemacs-logs-dir)
  "Log file for ELMO installation.")

(provide 'llemacs-config)

(message "%s was loaded." (file-name-nondirectory (or load-file-name buffer-file-name)))
