#!/bin/bash
# Time-stamp: "2024-12-19 12:05:17 (ywatanabe)"
# File: ./Ninja/workspace/formats/json2md.sh

# Function to print help message
print_help() {
    cat << EOF
Usage:
    json2md <input.json>
    md2json <input.md>
Description:
    Convert between JSON and human-readable Markdown formats.
    Output filename is automatically determined by changing extension.
Arguments:
    input       Input file path
Options:
    -h, --help  Show this help message
EOF
    exit 0
}

# Function to determine output filename
get_output_filename() {
    local input=$1
    local cmd=$2
    
    case "$cmd" in
        json2md)
            echo "${input%.json}.md"
            ;;
        md2json)
            echo "${input%.md}.json"
            ;;
    esac
}



# Convert JSON to human-readable markdown

json_to_md() {
    local input=$1
    local output=$2
    local depth=0
    
    get_indent() {
        printf "%*s" $(($1 * 4)) ""
    }
    
    {
        echo "# JSON Content"
        echo
        
        local current_section=""
        local in_array=false
        local array_items=""
        
        while IFS= read -r line; do
            [[ -z "${line// }" || "$line" =~ ^[[:space:]]*[\{\}][[:space:]]*$ ]] && continue
            
            line="${line%,}"
            
            if [[ $line =~ ^[[:space:]]*\"([^\"]+)\":[[:space:]]*(.*) ]]; then
                local key="${BASH_REMATCH[1]}"
                local value="${BASH_REMATCH[2]}"
                
                if [[ -n "$array_items" ]]; then
                    echo "$(get_indent $depth)- [$array_items]"
                    echo
                    array_items=""
                fi

                if [[ "$key" =~ ^nj/ ]]; then
                    current_section="$key"
                    echo "## $current_section"
                    echo
                    depth=1
                else
                    if [[ -n "$current_section" && "$key" != "nj/"* ]]; then
                        echo "$(get_indent $depth)- $key:"
                        ((depth++))
                    else
                        echo "## $key"
                        current_section=""
                        depth=0
                    fi
                    echo
                fi
                
                if [[ "$value" =~ ^[[:space:]]*\[[[:space:]]*$ ]]; then
                    in_array=true
                    continue
                elif [[ "$value" =~ ^[[:space:]]*\{[[:space:]]*$ ]]; then
                    continue
                fi
                
                if [[ -n "$value" ]]; then
                    echo "$(get_indent $depth)- $value"
                    echo
                fi
                
            elif [[ "$in_array" = true && $line =~ ^[[:space:]]*\"([^\"]+)\"[[:space:]]*$ ]]; then
                [[ -n "$array_items" ]] && array_items+=", "
                array_items+="\"${BASH_REMATCH[1]}\""
            elif [[ "$line" =~ ^[[:space:]]*\][[:space:]]*$ ]]; then
                in_array=false
                if [[ -n "$array_items" ]]; then
                    echo "$(get_indent $depth)- [$array_items]"
                    echo
                    array_items=""
                fi
                ((depth--))
            fi
        done < "$input"
    } > "${output:-/dev/stdout}"
}

# Convert human-readable markdown to JSON
md_to_json() {
    local input=$1
    local output=$2
    
    {
        echo "{"
        local first_entry=true
        local current_key=""
        local subsection_key=""
        
        while IFS= read -r line; do
            # Skip empty lines and main title
            [[ -z "$line" || "$line" =~ ^#[[:space:]]*JSON[[:space:]]*Content ]] && continue
            
            # Handle section headers (keys)
            if [[ "$line" =~ ^##[[:space:]]*(.*) ]]; then
                local key="${BASH_REMATCH[1]}"
                
                if [[ -n "$subsection_key" ]]; then
                    echo "    }"
                    if [[ "$first_entry" = true ]]; then
                        first_entry=false 
                    else
                        echo "    ,"
                    fi
                fi

                if [[ -z "$current_key" ]]; then
                    current_key="$key"
                    echo "    \"$current_key\": {"
                    subsection_key=""
                else
                    subsection_key="$key"
                    echo "        \"$subsection_key\":"
                fi
                continue
            fi
            
            # Handle content (values)
            if [[ "$line" =~ ^-[[:space:]]*(.*) ]]; then
                local value="${BASH_REMATCH[1]}"
                # Skip lines that look like closing brackets
                [[ "$value" =~ ^\}.* ]] && continue
                
                echo "        $value"
            fi
        done < "$input"
        
        # Close last section
        if [[ -n "$subsection_key" ]]; then
            echo "    }"
        fi
        echo "}"
    } > "${output:-/dev/stdout}"
}

# Main function
main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                print_help
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    # Check for required arguments
    if [[ $# -lt 1 ]]; then
        echo "Error: Input file required" >&2
        print_help
    fi

    local cmd=$(basename "$0")
    # Remove .sh extension if present
    cmd=${cmd%.sh}

    # Process each input file
    for input in "$@"; do
        local output=$(get_output_filename "$input" "$cmd")

        # Check if input file exists
        if [[ ! -f "$input" ]]; then
            echo "Error: Input file not found: $input" >&2
            continue
        fi

        # Execute appropriate conversion based on command name
        case "$cmd" in
            json2md)
                json_to_md "$input" "$output"
                ;;
            md2json)
                md_to_json "$input" "$output"
                ;;
            *)
                echo "Error: Unknown command $cmd" >&2
                exit 1
                ;;
        esac
    done
}

# Execute main function
main "$@"
cat tool-000.md 
